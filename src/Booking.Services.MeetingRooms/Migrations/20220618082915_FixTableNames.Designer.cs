// <auto-generated />
using System;
using Booking.Services.MeetingRooms;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booking.Services.MeetingRooms.Migrations
{
    [DbContext(typeof(MeetingRoomApplicationContext))]
    [Migration("20220618082915_FixTableNames")]
    partial class FixTableNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Booking.Services.MeetingRooms.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<string>("Floor")
                        .HasColumnType("text");

                    b.Property<long>("MeetingRoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeetingRoomId")
                        .IsUnique();

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("Booking.Services.MeetingRooms.Models.MeetingRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .IsUnicode(true)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .IsUnicode(true)
                        .HasColumnType("character varying(4096)");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Seats")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MeetingRooms", (string)null);
                });

            modelBuilder.Entity("Booking.Services.MeetingRooms.Models.RoomConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("HasProjector")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasWhiteBoard")
                        .HasColumnType("boolean");

                    b.Property<long>("MeetingRoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeetingRoomId")
                        .IsUnique();

                    b.ToTable("RoomConfigurations", (string)null);
                });

            modelBuilder.Entity("Booking.Services.MeetingRooms.Models.Location", b =>
                {
                    b.HasOne("Booking.Services.MeetingRooms.Models.MeetingRoom", "MeetingRoom")
                        .WithOne("Location")
                        .HasForeignKey("Booking.Services.MeetingRooms.Models.Location", "MeetingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingRoom");
                });

            modelBuilder.Entity("Booking.Services.MeetingRooms.Models.RoomConfiguration", b =>
                {
                    b.HasOne("Booking.Services.MeetingRooms.Models.MeetingRoom", "MeetingRoom")
                        .WithOne("Configuration")
                        .HasForeignKey("Booking.Services.MeetingRooms.Models.RoomConfiguration", "MeetingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingRoom");
                });

            modelBuilder.Entity("Booking.Services.MeetingRooms.Models.MeetingRoom", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
